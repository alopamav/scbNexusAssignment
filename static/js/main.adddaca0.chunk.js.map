{"version":3,"sources":["component/movieListScreen/SearchBox.js","component/movieListScreen/movieList.js","component/movieDetails/movieDetails.js","routes.js","root.js","serviceWorker.js","index.js"],"names":["SearchBox","searchQuery","onChange","placeholder","Grid","item","xs","TextField","autoFocus","e","currentTarget","value","name","margin","id","label","type","fullWidth","divStyle","color","textAlign","backgroundColor","paddingTop","marginTop","tableStyle","MovieList","props","handleSearchQuery","data","setState","urlmovie","axios","get","then","response","Response","rows","Search","catch","error","console","log","state","this","className","style","container","TableContainer","fontWeight","Table","TableHead","TableRow","TableCell","align","TableBody","map","key","imdbID","to","Title","Type","Year","width","height","overflow","src","Poster","Component","MovieDetails","handleBack","location","pathname","history","push","params","QueryString","search","title","borderBottom","borderRight","Tooltip","onClick","IconButton","aria-label","component","paddingLeft","paddingBottom","borderStyle","Runtime","Plot","Director","Writer","Actors","Router","exact","path","movieDetail","Root","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.adddaca0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\nimport {Grid} from \"@material-ui/core\";\r\n\r\nconst SearchBox = ({searchQuery, onChange, placeholder}) => {\r\n  return (\r\n    <Grid item xs={12}>\r\n      <TextField\r\n        autoFocus\r\n        onChange={(e) => onChange(e.currentTarget.value)}\r\n        name=\"search\"\r\n        value={searchQuery}\r\n        margin=\"dense\"\r\n        id=\"Search\"\r\n        label={placeholder}\r\n        type=\"text\"\r\n        fullWidth\r\n      />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","/* eslint-disable react/state-in-constructor */\r\nimport React, {Component} from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {\r\n  Grid,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n} from \"@material-ui/core\";\r\n\r\nimport SearchBox from \"./SearchBox\";\r\nimport axios from \"axios\";\r\n\r\nconst divStyle = {\r\n  color: \"black\",\r\n  textAlign: \"center\",\r\n  backgroundColor: \" #5458c7\",\r\n  paddingTop: \"2px\",\r\n  marginTop: \"1px\",\r\n};\r\nconst tableStyle = {\r\n  backgroundColor: \" #7373ee\",\r\n};\r\n\r\nclass MovieList extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      searchQuery: \"\",\r\n      rows: [],\r\n    };\r\n  }\r\n\r\n  handleSearchQuery = (data) => {\r\n    this.setState({searchQuery: data});\r\n    this.urlmovie(data);\r\n  };\r\n\r\n  componentDidMount() {}\r\n\r\n  urlmovie = (data) => {\r\n    axios\r\n      .get(\"http://www.omdbapi.com/?apikey=b9bd48a6&type=movie&S=\" + data)\r\n      .then((response) => {\r\n        if (response.data.Response !== \"False\") {\r\n          const rows = response.data.Search;\r\n\r\n          this.setState({rows});\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  render() {\r\n    const {searchQuery, rows} = this.state;\r\n    return (\r\n      <div className=\"movieList\">\r\n        <h2 style={divStyle}>Movie List</h2>\r\n        <Grid container>\r\n          <SearchBox\r\n            searchQuery={searchQuery}\r\n            onChange={this.handleSearchQuery}\r\n            placeholder=\"Search Movie\"\r\n          />\r\n        </Grid>\r\n        <TableContainer\r\n          style={{backgroundColor: \"#eeeeee\", fontWeight: \"bold\"}}\r\n        >\r\n          <Table>\r\n            <TableHead style={tableStyle}>\r\n              <TableRow>\r\n                <TableCell align=\"middle\">Title</TableCell>\r\n                <TableCell align=\"middle\">Type</TableCell>\r\n                <TableCell align=\"middle\">Year</TableCell>\r\n                <TableCell align=\"center\">Poster</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {this.state.rows.map((item) => (\r\n                <TableRow key={item.imdbID}>\r\n                  <Link to={`/movie?title=${item.imdbID}`}>\r\n                    <TableCell align=\"middle\" style={{fontWeight: \"900\"}}>\r\n                      {item.Title}\r\n                    </TableCell>\r\n                  </Link>\r\n\r\n                  <TableCell align=\"middle\">{item.Type}</TableCell>\r\n                  <TableCell align=\"middle\">{item.Year}</TableCell>\r\n                  <TableCell align=\"right\">\r\n                    <div\r\n                      style={{\r\n                        width: \"300px\",\r\n                        height: \"150px\",\r\n                        overflow: \"hidden\",\r\n                      }}\r\n                    >\r\n                      <img src={item.Poster} />\r\n                    </div>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MovieList;\r\n","/* eslint-disable react/state-in-constructor */\r\nimport React, {Component} from \"react\";\r\n\r\nimport * as QueryString from \"query-string\";\r\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\n\r\nimport {\r\n  Grid,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableRow,\r\n  Tooltip,\r\n  IconButton,\r\n} from \"@material-ui/core\";\r\n\r\nimport axios from \"axios\";\r\n\r\nconst tableStyle = {\r\n  backgroundColor: \" #7373ee\",\r\n};\r\nconst divStyle = {\r\n  color: \"black\",\r\n  textAlign: \"center\",\r\n  backgroundColor: \" #5458c7\",\r\n  paddingTop: \"2px\",\r\n  marginTop: \"1px\",\r\n};\r\n\r\nclass MovieDetails extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      rows: [],\r\n    };\r\n  }\r\n  handleBack = (props) => {\r\n    const {pathname} = this.props.location;\r\n    if (pathname === \"/movie\") {\r\n      this.props.history.push(\"/\");\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    const params = QueryString.parse(this.props.location.search);\r\n    axios\r\n      .get(\"http://www.omdbapi.com/?apikey=b9bd48a6&i=\" + params.title)\r\n      .then((response) => {\r\n        // this.rowsCopy = response.data;\r\n\r\n        const rows = response.data;\r\n\r\n        this.setState({rows});\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const {rows} = this.state;\r\n\r\n    return (\r\n      <div\r\n        style={{\r\n          borderBottom: \"50px\",\r\n          borderRight: \"50px\",\r\n        }}\r\n      >\r\n        <h2 style={divStyle}>movie Detail</h2>\r\n        <Grid container></Grid>\r\n        <Tooltip title=\"Back\" onClick={this.handleBack}>\r\n          <IconButton color=\"primary\" aria-label=\"\" component=\"span\">\r\n            <ArrowBackIcon />\r\n          </IconButton>\r\n        </Tooltip>\r\n        <div\r\n          style={{\r\n            height: \"150px\",\r\n            overflow: \"hidden\",\r\n            width: \"100%\",\r\n            paddingLeft: \"35%\",\r\n          }}\r\n        >\r\n          <img src={rows.Poster} />\r\n        </div>\r\n\r\n        <TableContainer\r\n          style={{\r\n            width: \"40%\",\r\n            paddingLeft: \"30%\",\r\n            paddingTop: \"2%\",\r\n            paddingBottom: \"5%\",\r\n          }}\r\n        >\r\n          <Table style={{borderStyle: \"solid\"}}>\r\n            <TableBody>\r\n              <TableRow>\r\n                <TableCell align=\"middle\">Title</TableCell>\r\n                <TableCell align=\"left\">{rows.Title}</TableCell>\r\n              </TableRow>\r\n              <TableRow>\r\n                <TableCell align=\"middle\">Year</TableCell>\r\n                <TableCell align=\"left\">{rows.Year}</TableCell>\r\n              </TableRow>\r\n              <TableRow>\r\n                <TableCell align=\"middle\">Categories</TableCell>\r\n                <TableCell align=\"left\">{rows.Runtime}</TableCell>\r\n              </TableRow>\r\n              <TableRow>\r\n                <TableCell align=\"middle\">Synopsis</TableCell>\r\n                <TableCell align=\"left\">{rows.Plot}</TableCell>\r\n              </TableRow>\r\n              <TableRow>\r\n                <TableCell align=\"middle\">Director</TableCell>\r\n                <TableCell align=\"left\">{rows.Director}</TableCell>\r\n              </TableRow>\r\n              <TableRow>\r\n                <TableCell align=\"middle\">Writer</TableCell>\r\n                <TableCell align=\"left\">{rows.Writer}</TableCell>\r\n              </TableRow>\r\n              <TableRow>\r\n                <TableCell align=\"left\">Actors</TableCell>\r\n                <TableCell align=\"left\">{rows.Actors}</TableCell>\r\n              </TableRow>\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MovieDetails;\r\n","import React from \"react\";\r\nimport {Switch, Route} from \"react-router-dom\";\r\nimport MovieList from \"./component/movieListScreen/movieList\";\r\nimport movieDetail from \"./component/movieDetails/movieDetails\";\r\n\r\nfunction Router() {\r\n  return (\r\n    <main>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={MovieList} />\r\n        <Route exact path=\"/movie\" component={movieDetail} />\r\n      </Switch>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Router;\r\n","import React from \"react\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport Router from \"./routes\";\r\n\r\nfunction Root(props) {\r\n  return (\r\n    <BrowserRouter>\r\n      <Router />\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default Root;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Root from \"./root\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Root />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}